{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","Array","fill","xIsNext","player1win","aiwin","gameOver","playagain","slice","setState","status","results","winner","calculateWinner","isFull","bestMove","minimax","s","player","freeSpaces","empty","length","push","emptySpaces","score","moves","newBoard","move","index","result","bestScore","handleClick","lines","a","b","c","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8d4ecab0.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button\r\n      className = \"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n  renderSquare(i) {\r\n    return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)}/>;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      squares: Array(9).fill(null),\r\n      xIsNext: true,\r\n      player1win: 0,\r\n      aiwin: 0,\r\n      gameOver: false,\r\n      playagain: '',\r\n    }\r\n  }\r\n\r\n\r\n  handleClick(i) {\r\n    const squares = this.state.squares.slice();\r\n    if (this.state.gameOver) {\r\n      this.setState({\r\n        squares: Array(9).fill(null),\r\n        gameOver: false,\r\n        xIsNext: !this.state.xIsNext,\r\n        playagain: '',\r\n      })\r\n      return;\r\n    }\r\n    if (squares[i] === null) {\r\n      squares[i] = this.state.xIsNext ? 'X' : 'O'\r\n      this.setState({\r\n        squares: squares,\r\n        xIsNext: !this.state.xIsNext,\r\n      });\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const winner = calculateWinner(this.state.squares);\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner;\r\n      this.state.playagain = 'Click to play again';\r\n      this.state.gameOver = true;\r\n    } else if (!isFull(this.state.squares)) {\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    } else if (isFull(this.state.squares)) {\r\n      status = 'Result: Tie';\r\n      this.state.playagain = 'Click to play again';\r\n      this.state.gameOver = true;\r\n    }\r\n\r\n    if (winner === 'X') {\r\n      this.state.player1win += 1;\r\n    } else if (winner === 'O') {\r\n      this.state.aiwin += 1;\r\n    }\r\n    let results;\r\n    results = \"Player 1: \" + this.state.player1win + \" AI: \" + this.state.aiwin;\r\n\r\n    if (!this.state.xIsNext && !this.state.gameOver) {\r\n      const bestMove = minimax(this.state.squares, 'O').index;\r\n      //console.log(bestMove);\r\n      this.handleClick(bestMove);\r\n    }\r\n\r\n    //console.log(emptySpaces(this.state.squares));\r\n    //console.log(minimax(this.state.squares, 'O'))\r\n\r\n    return (\r\n      <>\r\n      <h1 className=\"title\">Unbeatable Tic-Tac-Toe AI</h1>\r\n      <div className=\"game\">\r\n        <div className=\"status\">{status}</div>\r\n        <div className=\"playagain\">{this.state.playagain}</div>\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={this.state.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"results\">{results}</div>\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n\r\nfunction emptySpaces(squares) {\r\n  var empty = [];\r\n  for (var i = 0; i < squares.length; i++) {\r\n    if (squares[i] === null) {\r\n      empty.push(i);\r\n    }\r\n  }\r\n  return empty;\r\n}\r\n\r\nfunction isFull(s) {\r\n  if(s.includes(null)) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n//defining minimax function\r\nfunction minimax(s, player) {\r\n  const freeSpaces = emptySpaces(s);\r\n\r\n  // First check for a terminal state\r\n  if(calculateWinner(s) === 'O') {\r\n    return {score: 10};\r\n  } else if (calculateWinner(s) === 'X') {\r\n    return {score: -10};\r\n  } else if (!calculateWinner(s) && isFull(s)) {\r\n    return {score: 0};\r\n  }\r\n\r\n  var moves = [];\r\n  var newBoard = [...s];\r\n\r\n  for (var i = 0; i < freeSpaces.length; i++) {\r\n    var move = {};\r\n    move.index = freeSpaces[i];\r\n    newBoard[freeSpaces[i]] = player;\r\n\r\n    if (player === 'O') {\r\n      var result = minimax(newBoard, 'X');\r\n      move.score = result.score;\r\n    } else {\r\n      var result = minimax(newBoard, 'O');\r\n      move.score = result.score;\r\n    }\r\n\r\n    newBoard[freeSpaces[i]] = null;\r\n    moves.push(move);\r\n  }\r\n\r\n  var bestMove;\r\n  if (player === 'O') {\r\n    var bestScore = -10000;\r\n    for (var i = 0; i < moves.length; i++) {\r\n      if(moves[i].score > bestScore) {\r\n        bestScore = moves[i].score;\r\n        bestMove = i;\r\n      }\r\n    }\r\n  } else {\r\n    var bestScore = 10000;\r\n    for (var i = 0; i < moves.length; i++) {\r\n      if(moves[i].score < bestScore) {\r\n        bestScore = moves[i].score;\r\n        bestMove = i;\r\n      }\r\n    }\r\n  }\r\n\r\n  return moves[bestMove];\r\n\r\n}\r\n"],"sourceRoot":""}